### Cell Lattice ##
# the algorithm takes around 1700 steps to converge
include "vec2.bzz"
 
# Lennard-Jones parameters
TARGET_KIN     = 20.0
EPSILON_KIN    = 500.0
TARGET_NONKIN  = 50.0
EPSILON_NONKIN = 350.0
 
# Lennard-Jones interaction magnitude
function lj_magnitude(dist, target, epsilon) {
    return -(epsilon / dist) * ((target / dist)^4 - (target / dist)^2)
}

# Neighbor data to LJ interaction vector
function lj_vector_kin(rid, data) {
    return math.vec2.newp(lj_magnitude(data.distance, TARGET_KIN, EPSILON_KIN), data.azimuth)
}
function lj_vector_nonkin(rid, data) {
    return math.vec2.newp(lj_magnitude(data.distance, TARGET_NONKIN, EPSILON_NONKIN), data.azimuth)
}
 
# Accumulator of neighbor LJ interactions
function lj_sum(rid, data, accum) {
    return math.vec2.add(data, accum)
}
 
# Calculates and actuates the flocking interaction
function cytoplasm() {
    var accum = neighbors.map(lj_vector_kin).reduce(lj_sum, math.vec2.new(light[0].value, light[0].angle))
    if(neighbors.count() > 0)
        math.vec2.scale(accum, 1.0 / neighbors.count())
    goto(accum.x, accum.y)
}
function membrane() {
    var accum = neighbors.map(lj_vector_nonkin).reduce(lj_sum, math.vec2.new(light[0].value, light[0].angle))
    if(neighbors.count() > 0)
        math.vec2.scale(accum, 1.0 / neighbors.count())
    goto(accum.x, accum.y)
}

function flashR() {
    set_leds(255,0,0)
}
function flashG() {
    set_leds(0,255,0)
}

# Executed at init time
function init() {
    s1 = swarm.create(1)
	s2 = swarm.create(2)
    s1.select(id%2==0)              # sub-swarm to form membrane
    s2.select((id+1)%2==0)          # sub-swarm to form cytoplasm     
}
 
# Executed every time step
function step() {
    s1.exec(membrane)
    s1.exec(flashG)
    s2.exec(cytoplasm)
    s2.exec(flashR)
}
 
# Execute at exit
function destroy() {
}